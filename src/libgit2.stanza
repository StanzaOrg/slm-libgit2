defpackage libgit2 :
  import core
  import collections

  forward libgit2/enum/git_error_code
  forward libgit2/enum/git_error_t
  forward libgit2/enum/git_checkout_strategy_t

;============================================================
;================== Heap Allocation Types ===================
;============================================================

lostanza deftype PointerBox :
  var value:ptr<?>

lostanza deftype LongBox :
  var value:long

;==============================================
;================= C Externs ==================
;==============================================

; ------------------------------------------------------------------------------
; --- git2/global.h - Global state  --------------------------------------------
; ------------------------------------------------------------------------------

;; int git_libgit2_init(void);
extern git_libgit2_init : () -> int

;; int git_libgit2_shutdown(void);
extern git_libgit2_shutdown : () -> int


; ------------------------------------------------------------------------------
; --- git2/common.h - Git common platform definition ---------------------------
; ------------------------------------------------------------------------------

;; typedef struct git_repository git_repository;
public lostanza deftype GIT_REPOSITORY :
  gr-ptr: ptr<?>


; ------------------------------------------------------------------------------
; --- git2/errors.h - Git error handling routines and variables ----------------
; ------------------------------------------------------------------------------

;; typedef struct { char *message; int klass; } git_error;
public lostanza deftype GIT_ERROR_STRUCT :
  message : ptr<byte>
  klass   : int

;; const git_error * git_error_last(void);
extern git_error_last : () -> ptr<GIT_ERROR_STRUCT>


; ------------------------------------------------------------------------------
; --- git2/oid.h - Git object ID -----------------------------------------------
; ------------------------------------------------------------------------------

public lostanza val GIT_OID_MAX_SIZE:int = 40
public lostanza val GIT_OID_MAX_HEXSIZE:int = 40


; ------------------------------------------------------------------------------
; --- git2/strarray.h - Git string array routines ------------------------------
; ------------------------------------------------------------------------------

;; typedef struct git_strarray {char **strings; size_t count;} git_strarray;
lostanza deftype GIT_STRARRAY :
  strings : ptr<ptr<byte>>
  count   : int

;; void git_strarray_dispose(git_strarray *array);
extern git_strarray_dispose : (ptr<GIT_STRARRAY>) -> int


; ------------------------------------------------------------------------------
; --- git2/repository.h - Git repository management routines  ------------------
; ------------------------------------------------------------------------------

;; void git_repository_free(git_repository *repo);
extern git_repository_free : (ptr<GIT_REPOSITORY>) -> int

;; int git_repository_open(git_repository **out, const char *path);
extern git_repository_open : (ptr<ptr<GIT_REPOSITORY>>, ptr<byte>) -> int


; ------------------------------------------------------------------------------
; --- git2/branch.h - Git branch parsing routines  -----------------------------
; ------------------------------------------------------------------------------

;; int git_branch_lookup(git_reference **out, git_repository *repo, const char *branch_name, git_branch_t branch_type);

;; void git_branch_iterator_free(git_branch_iterator *iter);

;; int git_branch_iterator_new(git_branch_iterator **out, git_repository *repo, git_branch_t list_flags);

;; int git_branch_next(git_reference **out, git_branch_t *out_type, git_branch_iterator *iter);

;; void git_branch_iterator_free(git_branch_iterator *iter);


; ------------------------------------------------------------------------------
; --- git2/tag.h - Git tag parsing routines  -----------------------------------
; ------------------------------------------------------------------------------

;; int git_tag_list(git_strarray *tag_names, git_repository *repo);
; extern git_tag_list : (ptr<GIT_STRARRAY>), ptr<GIT_REPOSITORY>) -> int


; ------------------------------------------------------------------------------
; --- libgit2.c - Our local convenience wrappers -------------------------------
; ------------------------------------------------------------------------------

;; int stz_libgit2_clone(git_repository **out, const char *url, const char *local_path, int depth)
extern stz_libgit2_clone : (ptr<ptr<GIT_REPOSITORY>>, ptr<byte>, ptr<byte>, int) -> int

;; int stz_libgit2_fetch(git_repository *repo, const char *remote_name, const char *refspec, int depth)
extern stz_libgit2_fetch : (ptr<GIT_REPOSITORY>, ptr<byte>, ptr<byte>, int) -> int

;; int stz_libgit2_checkout(git_repository *repo, const char *refish, git_checkout_strategy_t checkout_strategy)
extern stz_libgit2_checkout : (ptr<GIT_REPOSITORY>, ptr<byte>, int) -> int

;;int stz_libgit2_revparse(char **out, git_repository *repo, const char *refish)
extern stz_libgit2_revparse : (ptr<ptr<byte>>, ptr<GIT_REPOSITORY>, ptr<byte>) -> int

;; int stz_libgit2_lsremote(char ***ids_out, char ***names_out, size_t *out_len,
;;                          git_repository *repo, const char *remote_name)
extern stz_libgit2_lsremote : (ptr<ptr<ptr<byte>>>, ptr<ptr<ptr<byte>>>, ptr<long>, ptr<GIT_REPOSITORY>, ptr<byte>) -> int

;; int stz_libgit2_lsremote_url(char ***ids_out, char ***names_out, size_t *out_len, const char *remote_url)
extern stz_libgit2_lsremote_url : (ptr<ptr<ptr<byte>>>, ptr<ptr<ptr<byte>>>, ptr<long>, ptr<byte>) -> int

;============================================================
;======================= Wrappers ===========================
;============================================================

public lostanza defn libgit2_init () -> ref<Int> :
  return new Int{call-c git_libgit2_init()}

public lostanza defn libgit2_shutdown () -> ref<Int> :
  return new Int{call-c git_libgit2_shutdown()}

public defstruct LIBGIT2_ERROR :
  message : String
  klass   : Int

public lostanza defn libgit2_error_last () -> ref<LIBGIT2_ERROR> :
  val pges:ptr<GIT_ERROR_STRUCT> = call-c git_error_last()
  return LIBGIT2_ERROR(String(pges.message), new Int{pges.klass})

; Free the repository
public lostanza defn libgit2_repository_free (gr:ref<GIT_REPOSITORY>) -> ref<Int> :
  return new Int{call-c git_repository_free(gr.gr-ptr)}

; Open the repository in the folder at 'path'
public lostanza defn libgit2_repository_open (path:ref<String>) -> ref<git_error_code|GIT_REPOSITORY> :
  val repo-ptr-box = new PointerBox{null}
  val r:int = call-c git_repository_open(addr!(repo-ptr-box.value) as ptr<ptr<?>>, addr!(path.chars))
  if r == 0 :
    return new GIT_REPOSITORY{repo-ptr-box.value}
  else :
    return git_error_code(r)

; Wrapper for git_clone
; Requires that the library has been initialized
public lostanza defn libgit2_clone (url:ref<String>, local_path:ref<String>, depth:ref<Int>) -> ref<git_error_code|GIT_REPOSITORY> :
  val repo-ptr-box = new PointerBox{null}
  val r:int = call-c stz_libgit2_clone(addr!(repo-ptr-box.value) as ptr<ptr<?>>, addr!(url.chars), addr!(local_path.chars), depth.value)
  if r == 0 :
    return new GIT_REPOSITORY{repo-ptr-box.value}
  else :
    return git_error_code(r)

; Overload for git_clone with default depth = 0 (full clone)
public defn libgit2_clone (url:String, local_path:String) -> git_error_code|GIT_REPOSITORY :
  libgit2_clone(url, local_path, 0)

; Helper for libgit2_fetch
lostanza defn fetch_with_refspec (repo:ref<GIT_REPOSITORY>, remote-name:ref<String>, refspec:ref<String>, depth:ref<Int>) -> ref<git_error_code> :
  val r:int = call-c stz_libgit2_fetch(repo.gr-ptr, addr!(remote-name.chars), addr!(refspec.chars), depth.value)
  return git_error_code(r)

; Helper for libgit2_fetch
lostanza defn fetch_without_refspec (repo:ref<GIT_REPOSITORY>, remote-name:ref<String>, depth:ref<Int>) -> ref<git_error_code> :
  val r:int = call-c stz_libgit2_fetch(repo.gr-ptr, addr!(remote-name.chars), null, depth.value)
  return git_error_code(r)

; Wrapper for git_remote_fetch
; Requires that the library has been initialized
public defn libgit2_fetch (repo:GIT_REPOSITORY, remote-name:String, refspec:String|False = false, depth:Int = 0) -> git_error_code :
  match(refspec) :
    (refspec:String) :  fetch_with_refspec(repo, remote-name, refspec, depth)
    (_) : fetch_without_refspec(repo, remote-name, depth)

; Wrapper for git_checkout_tree
; Requires that the library has been initialized
public lostanza defn libgit2_checkout (repo:ref<GIT_REPOSITORY>, refish:ref<String>, checkout-strategy:ref<git_checkout_strategy_t>) -> ref<git_error_code> :
  val r:int = call-c stz_libgit2_checkout(repo.gr-ptr, addr!(refish.chars), to-int(checkout-strategy).value)
  return git_error_code(r)

; Overload which defaults to safe checkout
public defn libgit2_checkout (repo:GIT_REPOSITORY, refish:String) -> git_error_code :
  libgit2_checkout(repo, refish, GIT_CHECKOUT_SAFE)

; Returns the 40-character hex representation of the object ID of the reference
; 'refish' in the repo 'repo'
; Requires that the library has been initialized
public lostanza defn libgit2_revparse (repo:ref<GIT_REPOSITORY>, refish:ref<String>) -> ref<git_error_code|String> :
  val oid-ptr-box = new PointerBox{null}
  val r:int = call-c stz_libgit2_revparse(addr!(oid-ptr-box.value) as ptr<ptr<byte>>, repo.gr-ptr, addr!(refish.chars))
  if r == 0 :
    val result = String(GIT_OID_MAX_HEXSIZE, oid-ptr-box.value as ptr<byte>)
    call-c clib/free(oid-ptr-box.value as ptr<byte>)
    return result
  else :
    return git_error_code(r)

; Returns a list of hash ID => reference name for all references on the remote
; 'remote-name' of the repo 'repo'
; Requires that the library has been initialized
public lostanza defn libgit2_lsremote (repo:ref<GIT_REPOSITORY>, remote-name:ref<String>) -> ref<git_error_code|Tuple<KeyValue<String,String>>> :
  val ids-ptr-box = new PointerBox{null}
  val names-ptr-box = new PointerBox{null}
  val len-box = new LongBox{0L}
  val r:int = call-c stz_libgit2_lsremote(addr!(ids-ptr-box.value) as ptr<ptr<ptr<byte>>>, addr!(names-ptr-box.value) as ptr<ptr<ptr<byte>>>, addr!(len-box.value) as ptr<long>, repo.gr-ptr, addr!(remote-name.chars))
  if r == 0 :
    return convert-and-free-reference-hash-name-arrays(ids-ptr-box,
             names-ptr-box, len-box)
  else :
    return git_error_code(r)

; Returns a list of hash ID => reference name for all references on the remote
; at the URL 'remote-url'
; Requires that the library has been initialized
public lostanza defn libgit2_lsremote_url (remote-url:ref<String>) -> ref<git_error_code|Tuple<KeyValue<String,String>>> :
  val ids-ptr-box = new PointerBox{null}
  val names-ptr-box = new PointerBox{null}
  val len-box = new LongBox{0L}
  val r:int = call-c stz_libgit2_lsremote_url(addr!(ids-ptr-box.value) as ptr<ptr<ptr<byte>>>, addr!(names-ptr-box.value) as ptr<ptr<ptr<byte>>>, addr!(len-box.value) as ptr<long>, addr!(remote-url.chars))
  if r == 0 :
    return convert-and-free-reference-hash-name-arrays(ids-ptr-box,
             names-ptr-box, len-box)
  else :
    return git_error_code(r)

; Helper for libgit2_lsremote and libgit2_lsremote_url to convert hash and
; reference name arrays into a tuple of HiStanza hash => reference name entries
; Also frees the strings
lostanza defn convert-and-free-reference-hash-name-arrays (
                ids-ptr-box:ref<PointerBox>, names-ptr-box:ref<PointerBox>,
                len-box:ref<LongBox>) -> ref<Tuple<KeyValue<String,String>>> :
  val ids-arr = ids-ptr-box.value as ptr<ptr<byte>>
  val names-arr = names-ptr-box.value as ptr<ptr<byte>>
  val len = len-box.value
  val result = core/void-tuple(len)
  for (var i:long = 0L, i < len, i = i + 1L) :
    val id = [ids-arr + (i * sizeof(ptr<byte>))] as ptr<byte>
    val name = [names-arr + (i * sizeof(ptr<byte>))] as ptr<byte>
    result.items[i] = KeyValue(String(id), String(name))
    call-c clib/free(id)
    call-c clib/free(name)
  call-c clib/free(ids-arr)
  call-c clib/free(names-arr)
  return result
