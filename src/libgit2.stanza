defpackage libgit2 :
  import core
  import collections

  forward libgit2/enum/git_error_code
  forward libgit2/enum/git_error_t
  forward libgit2/enum/git_checkout_strategy_t

;==============================================
;================= C Externs ==================
;==============================================

; ------------------------------------------------------------------------------
; --- git2/global.h - Global state  --------------------------------------------
; ------------------------------------------------------------------------------

;; int git_libgit2_init(void);
extern git_libgit2_init : () -> int

;; int git_libgit2_shutdown(void);
extern git_libgit2_shutdown : () -> int


; ------------------------------------------------------------------------------
; --- git2/common.h - Git common platform definition ---------------------------
; ------------------------------------------------------------------------------

;; typedef struct git_repository git_repository;
public lostanza deftype GIT_REPOSITORY :
  gr-ptr: ptr<?>


; ------------------------------------------------------------------------------
; --- git2/errors.h - Git error handling routines and variables ----------------
; ------------------------------------------------------------------------------

;; typedef struct { char *message; int klass; } git_error;
public lostanza deftype GIT_ERROR_STRUCT :
  message : ptr<byte>
  klass   : int

;; const git_error * git_error_last(void);
extern git_error_last : () -> ptr<GIT_ERROR_STRUCT>


; ------------------------------------------------------------------------------
; --- git2/oid.h - Git object ID -----------------------------------------------
; ------------------------------------------------------------------------------

public lostanza val GIT_OID_MAX_SIZE:int = 40
public lostanza val GIT_OID_MAX_HEXSIZE:int = 40


; ------------------------------------------------------------------------------
; --- git2/strarray.h - Git string array routines ------------------------------
; ------------------------------------------------------------------------------

;; typedef struct git_strarray {char **strings; size_t count;} git_strarray;
lostanza deftype GIT_STRARRAY :
  strings : ptr<ptr<byte>>
  count   : int

;; void git_strarray_dispose(git_strarray *array);
extern git_strarray_dispose : (ptr<GIT_STRARRAY>) -> int


; ------------------------------------------------------------------------------
; --- git2/repository.h - Git repository management routines  ------------------
; ------------------------------------------------------------------------------

;; void git_repository_free(git_repository *repo);
extern git_repository_free : (ptr<GIT_REPOSITORY>) -> int

;; int git_repository_open(git_repository **out, const char *path);
extern git_repository_open : (ptr<ptr<GIT_REPOSITORY>>, ptr<byte>) -> int


; ------------------------------------------------------------------------------
; --- git2/branch.h - Git branch parsing routines  -----------------------------
; ------------------------------------------------------------------------------

;; int git_branch_lookup(git_reference **out, git_repository *repo, const char *branch_name, git_branch_t branch_type);

;; void git_branch_iterator_free(git_branch_iterator *iter);

;; int git_branch_iterator_new(git_branch_iterator **out, git_repository *repo, git_branch_t list_flags);

;; int git_branch_next(git_reference **out, git_branch_t *out_type, git_branch_iterator *iter);

;; void git_branch_iterator_free(git_branch_iterator *iter);


; ------------------------------------------------------------------------------
; --- git2/tag.h - Git tag parsing routines  -----------------------------------
; ------------------------------------------------------------------------------

;; int git_tag_list(git_strarray *tag_names, git_repository *repo);
; extern git_tag_list : (ptr<GIT_STRARRAY>), ptr<GIT_REPOSITORY>) -> int


; ------------------------------------------------------------------------------
; --- libgit2.c - Our local convenience wrappers -------------------------------
; ------------------------------------------------------------------------------

;; int stz_libgit2_clone(git_repository **out, const char *url, const char *local_path, int depth)
extern stz_libgit2_clone : (ptr<ptr<GIT_REPOSITORY>>, ptr<byte>, ptr<byte>, int) -> int

;; int stz_libgit2_fetch(git_repository *repo, const char *remote_name, const char *refspec, int depth)
extern stz_libgit2_fetch : (ptr<GIT_REPOSITORY>, ptr<byte>, ptr<byte>, int) -> int

;; int stz_libgit2_checkout(git_repository *repo, const char *refish, git_checkout_strategy_t checkout_strategy)
extern stz_libgit2_checkout : (ptr<GIT_REPOSITORY>, ptr<byte>, int) -> int

;;int stz_libgit2_revparse(char **out, git_repository *repo, const char *refish)
extern stz_libgit2_revparse : (ptr<ptr<byte>>, ptr<GIT_REPOSITORY>, ptr<byte>) -> int

;============================================================
;======================= Wrappers ===========================
;============================================================

public lostanza defn libgit2_init () -> ref<Int> :
  return new Int{call-c git_libgit2_init()}

public lostanza defn libgit2_shutdown () -> ref<Int> :
  return new Int{call-c git_libgit2_shutdown()}

public defstruct LIBGIT2_ERROR :
  message : String
  klass   : Int

public lostanza defn libgit2_error_last () -> ref<LIBGIT2_ERROR> :
  val pges:ptr<GIT_ERROR_STRUCT> = call-c git_error_last()
  return LIBGIT2_ERROR(String(pges.message), new Int{pges.klass})

; Free the repository
public lostanza defn libgit2_repository_free (gr:ref<GIT_REPOSITORY>) -> ref<Int> :
  return new Int{call-c git_repository_free(gr.gr-ptr)}

; Open the repository in the folder at 'path'
public lostanza defn libgit2_repository_open (path:ref<String>) -> ref<git_error_code|GIT_REPOSITORY> :
  val pgr:ptr<ptr<?>> = call-c clib/malloc(sizeof(ptr<?>))
  val r:int = call-c git_repository_open(pgr, addr!(path.chars))
  if r == 0 :
    val gr:ptr<?> = [pgr]
    call-c clib/free(pgr)
    return new GIT_REPOSITORY{gr}
  else :
    call-c clib/free(pgr)
    return git_error_code(r)

; Wrapper for git_clone
; Requires that the library has been initialized
public lostanza defn libgit2_clone (url:ref<String>, local_path:ref<String>, depth:ref<Int>) -> ref<git_error_code|GIT_REPOSITORY> :
  val pgr:ptr<ptr<?>> = call-c clib/malloc(sizeof(ptr<?>))
  val r:int = call-c stz_libgit2_clone(pgr, addr!(url.chars), addr!(local_path.chars), depth.value)
  if r == 0 :
    val gr:ptr<?> = [pgr]
    call-c clib/free(pgr)
    return new GIT_REPOSITORY{gr}
  else :
    call-c clib/free(pgr)
    return git_error_code(r)

; Overload for git_clone with default depth = 0 (full clone)
public defn libgit2_clone (url:String, local_path:String) -> git_error_code|GIT_REPOSITORY :
  libgit2_clone(url, local_path, 0)

; Helper for libgit2_fetch
lostanza defn fetch_with_refspec (repo:ref<GIT_REPOSITORY>, remote-name:ref<String>, refspec:ref<String>, depth:ref<Int>) -> ref<git_error_code> :
  val r:int = call-c stz_libgit2_fetch(repo.gr-ptr, addr!(remote-name.chars), addr!(refspec.chars), depth.value)
  return git_error_code(r)

; Helper for libgit2_fetch
lostanza defn fetch_without_refspec (repo:ref<GIT_REPOSITORY>, remote-name:ref<String>, depth:ref<Int>) -> ref<git_error_code> :
  val r:int = call-c stz_libgit2_fetch(repo.gr-ptr, addr!(remote-name.chars), null, depth.value)
  return git_error_code(r)

; Wrapper for git_remote_fetch
; Requires that the library has been initialized
public defn libgit2_fetch (repo:GIT_REPOSITORY, remote-name:String, refspec:String|False = false, depth:Int = 0) -> git_error_code :
  match(refspec) :
    (refspec:String) :  fetch_with_refspec(repo, remote-name, refspec, depth)
    (_) : fetch_without_refspec(repo, remote-name, depth)

; Wrapper for git_checkout_tree
; Requires that the library has been initialized
public lostanza defn libgit2_checkout (repo:ref<GIT_REPOSITORY>, refish:ref<String>, checkout-strategy:ref<git_checkout_strategy_t>) -> ref<git_error_code> :
  val r:int = call-c stz_libgit2_checkout(repo.gr-ptr, addr!(refish.chars), to-int(checkout-strategy).value)
  return git_error_code(r)

; Overload which defaults to safe checkout
public defn libgit2_checkout (repo:GIT_REPOSITORY, refish:String) -> git_error_code :
  libgit2_checkout(repo, refish, GIT_CHECKOUT_SAFE)

; Returns the 40-character hex representation of the object ID of the reference
; 'refish' in the repo 'repo'
; Requires that the library has been initialized
public lostanza defn libgit2_revparse (repo:ref<GIT_REPOSITORY>, refish:ref<String>) -> ref<git_error_code|String> :
  val oid_str_ptr:ptr<ptr<?>> = call-c clib/malloc(sizeof(ptr<?>))
  val r:int = call-c stz_libgit2_revparse(oid_str_ptr, repo.gr-ptr, addr!(refish.chars))
  if r == 0 :
    val oid_str = String(GIT_OID_MAX_HEXSIZE, [oid_str_ptr])
    call-c clib/free(oid_str_ptr)
    return oid_str
  else :
    call-c clib/free(oid_str_ptr)
    return git_error_code(r)

; EXAMPLE FIXME public lostanza defn libarchive_error_string (p:ref<LIBARCHIVE>) -> ref<String|False> :
;   val pb:ptr<byte> = call-c archive_error_string(p.la-ptr)
;   if pb == null :
;     return false
;   else :
;     return String(pb)

; EXAMPLE FIXME public lostanza defn libarchive_read_close (p:ref<LIBARCHIVE>) -> ref<Int> :
;   return new Int{call-c archive_read_close(p.la-ptr)}



;============================================================
;================ High Level Functions ======================
;============================================================

; EXAMPLE FIXME defn errstr (i:Int) -> String :
;   switch {i == _} :
;     ARCHIVE_EOF    : "ARCHIVE_EOF"
;     ARCHIVE_OK     : "ARCHIVE_OK"
;     ARCHIVE_RETRY  : "ARCHIVE_RETRY"
;     ARCHIVE_WARN   : "ARCHIVE_WARN"
;     ARCHIVE_FAILED : "ARCHIVE_FAILED"
;     ARCHIVE_FATAL  : "ARCHIVE_FATAL"
;     else : to-string(i)

; EXAMPLE FIXME public defn untar (filename:String, targetdir:String, -- verbose:True|False = false, dryrun:True|False = false) -> Int :


;========================================
;; Initial target
;; 1. git_clone
;; 2. git_fetch
;; 3. git_checkout
;; 4. git_tag
;; 5. no credentials
;; 6. no progress callbacks
;;
;; Equivalent of this:
;; 1. git clone https://github.com/StanzaOrg/slm-json.git    ; https-only at first, maybe ssh later
;; 2. git checkout static                                    ; checkout different branch as an example
;; 3. git fetch                                              ; get new changes
;; 4. git tag -l                                             ; list tags
;; 5. git checkout v0.0.9                                    ; checkout tag - leaves detached head state?


;========================================
;; required data and functions
; struct git_repository
; git_libgit2_init()
; struct git_clone_options
; git_clone_options_init()
; enum git_checkout_strategy_t;
; struct git_checkout_options
; git_checkout_options_init()
; git_clone()
; struct git_error
; enum git_error_code
; git_error_last()
; git_repository_free()
; git_libgit2_shutdown()

;========================================
;; test flow
; git_repository *repo = NULL;

; const char *git_dir = NULL;
; if (!git_dir)
;         git_dir = ".";

; int return_code = 1;

; size_t i;

; ;; init
; git_libgit2_init();

; ;; clone
;   progress_data pd = {{0}};
;   git_repository *cloned_repo = NULL;
;   git_clone_options clone_opts = GIT_CLONE_OPTIONS_INIT;
;   git_checkout_options checkout_opts = GIT_CHECKOUT_OPTIONS_INIT;

;   /* Set up options */
;   checkout_opts.checkout_strategy = GIT_CHECKOUT_SAFE;
;   checkout_opts.progress_cb = checkout_progress;
;   checkout_opts.progress_payload = &pd;
;   clone_opts.checkout_opts = checkout_opts;
;   clone_opts.fetch_opts.callbacks.sideband_progress = sideband_progress;
;   clone_opts.fetch_opts.callbacks.transfer_progress = &fetch_progress;
;   clone_opts.fetch_opts.callbacks.credentials = cred_acquire_cb;
;   clone_opts.fetch_opts.callbacks.payload = &pd;

;   /* Do the clone */
;   error = git_clone(&cloned_repo, url, path, &clone_opts);
;   if (error != 0) {
;           const git_error *err = git_error_last();
;           if (err) printf("ERROR %d: %s\n", err->klass, err->message);
;           else printf("ERROR %d: no detailed info\n", error);
;   }
;   else if (cloned_repo) git_repository_free(cloned_repo);

; ;; open existing
; git_repository_open_ext(&repo, git_dir, 0, NULL)

; ;; free
; git_repository_free(repo);
; git_libgit2_shutdown();
