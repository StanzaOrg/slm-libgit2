
#use-added-syntax(tests)
defpackage libgit2/tests :
  import core

  import libgit2

deftest test-basic-init :
  val r = libgit2_init()
  try:
    ;val sf = libarchive_error_string(a)
    #EXPECT(r == 1)  ; refcount of inits
  finally:
    val s = libgit2_shutdown()
    #EXPECT(s == 0)

deftest test-error-last :
  val expected_message = "libgit2 has not been initialized; you must call git_libgit2_init"
  val e = libgit2_error_last()
  #EXPECT(message(e) == expected_message)
  #EXPECT(git_error_t(klass(e)) == GIT_ERROR_INVALID)

deftest(online) test-clone :
  libgit2_init()
  val r:git_error_code|GIT_REPOSITORY = libgit2_clone("https://github.com/StanzaOrg/stanza-toml.git", "./foo")
  match(r):
    (e:git_error_code) :
      println("libgit2_clone returned error: %_" % [e])
      println("last error = %_" % [message(libgit2_error_last())])
      libgit2_shutdown()
      #EXPECT(false)
    (gr:GIT_REPOSITORY) :
      libgit2_repository_free(gr)
  libgit2_shutdown()

deftest(online) test-shallow-clone-fetch-checkout :
  libgit2_init()
  var err:git_error_code

  ; Shallow clone
  val r:git_error_code|GIT_REPOSITORY = libgit2_clone("https://github.com/StanzaOrg/stanza-toml.git", "./foo-scfc", 1)
  val repo = match(r):
    (err:git_error_code) :
      println("libgit2_clone returned error: %_" % [err])
      println("last error = %_" % [message(libgit2_error_last())])
      libgit2_shutdown()
      #EXPECT(false)
    (repo:GIT_REPOSITORY) :
      repo

  ; Fetch
  err = libgit2_fetch(repo, "origin", "+refs/tags/v0.4.0:refs/tags/v0.4.0", 1)
  if err is-not GIT_OK :
    println("libgit2_fetch returned error: %_" % [err])
    println("last error = %_" % [message(libgit2_error_last())])
    libgit2_repository_free(repo)
    libgit2_shutdown()
    #EXPECT(false)

  ; Checkout
  err = libgit2_checkout(repo, "refs/tags/v0.4.0", GIT_CHECKOUT_SAFE)
  if err is-not GIT_OK :
    println("libgit2_checkout returned error: %_" % [err])
    println("last error = %_" % [message(libgit2_error_last())])
    libgit2_repository_free(repo)
    libgit2_shutdown()
    #EXPECT(false)
  libgit2_repository_free(repo)
  libgit2_shutdown()
