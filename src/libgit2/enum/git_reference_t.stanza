; This file was auto-generated by lbstanza-wrapper
; Version 0.3.1
; Manual editing would be unwise
defpackage libgit2/enum/git_reference_t :
  import core

public deftype git_reference_t <: Equalable
public deftype GIT_REFERENCE_INVALID <: git_reference_t
public deftype GIT_REFERENCE_DIRECT <: git_reference_t
public deftype GIT_REFERENCE_SYMBOLIC <: git_reference_t
public deftype GIT_REFERENCE_ALL <: git_reference_t

public val GIT_REFERENCE_INVALID = new GIT_REFERENCE_INVALID
public val GIT_REFERENCE_DIRECT = new GIT_REFERENCE_DIRECT
public val GIT_REFERENCE_SYMBOLIC = new GIT_REFERENCE_SYMBOLIC
public val GIT_REFERENCE_ALL = new GIT_REFERENCE_ALL

public defn to-int (v:git_reference_t) -> Int:
  match(v) :
    (x:GIT_REFERENCE_INVALID) : 0
    (x:GIT_REFERENCE_DIRECT) : 1
    (x:GIT_REFERENCE_SYMBOLIC) : 2
    (x:GIT_REFERENCE_ALL) : 3

public defn git_reference_t (v:Int) -> git_reference_t :
  switch {v == _}:
    0 : GIT_REFERENCE_INVALID
    1 : GIT_REFERENCE_DIRECT
    2 : GIT_REFERENCE_SYMBOLIC
    3 : GIT_REFERENCE_ALL
    else: throw(Exception("git_reference_t: Invalid Enum Value: %_" % [v]))

public lostanza defn git_reference_t (v:int) -> ref<git_reference_t> :
  return git_reference_t(new Int{v})

public defmethod print (o:OutputStream, v:git_reference_t) :
  match(v) :
    (x:GIT_REFERENCE_INVALID) : print(o, "GIT_REFERENCE_INVALID")
    (x:GIT_REFERENCE_DIRECT) : print(o, "GIT_REFERENCE_DIRECT")
    (x:GIT_REFERENCE_SYMBOLIC) : print(o, "GIT_REFERENCE_SYMBOLIC")
    (x:GIT_REFERENCE_ALL) : print(o, "GIT_REFERENCE_ALL")

public defmethod equal? (a:git_reference_t, b:git_reference_t) -> True|False :
  to-int(a) == to-int(b)

