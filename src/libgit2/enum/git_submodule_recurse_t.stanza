; This file was auto-generated by lbstanza-wrapper
; Version 0.3.1
; Manual editing would be unwise
defpackage libgit2/enum/git_submodule_recurse_t :
  import core

public deftype git_submodule_recurse_t <: Equalable
public deftype GIT_SUBMODULE_RECURSE_NO <: git_submodule_recurse_t
public deftype GIT_SUBMODULE_RECURSE_YES <: git_submodule_recurse_t
public deftype GIT_SUBMODULE_RECURSE_ONDEMAND <: git_submodule_recurse_t

public val GIT_SUBMODULE_RECURSE_NO = new GIT_SUBMODULE_RECURSE_NO
public val GIT_SUBMODULE_RECURSE_YES = new GIT_SUBMODULE_RECURSE_YES
public val GIT_SUBMODULE_RECURSE_ONDEMAND = new GIT_SUBMODULE_RECURSE_ONDEMAND

public defn to-int (v:git_submodule_recurse_t) -> Int:
  match(v) :
    (x:GIT_SUBMODULE_RECURSE_NO) : 0
    (x:GIT_SUBMODULE_RECURSE_YES) : 1
    (x:GIT_SUBMODULE_RECURSE_ONDEMAND) : 2

public defn git_submodule_recurse_t (v:Int) -> git_submodule_recurse_t :
  switch {v == _}:
    0 : GIT_SUBMODULE_RECURSE_NO
    1 : GIT_SUBMODULE_RECURSE_YES
    2 : GIT_SUBMODULE_RECURSE_ONDEMAND
    else: throw(Exception("git_submodule_recurse_t: Invalid Enum Value: %_" % [v]))

public lostanza defn git_submodule_recurse_t (v:int) -> ref<git_submodule_recurse_t> :
  return git_submodule_recurse_t(new Int{v})

public defmethod print (o:OutputStream, v:git_submodule_recurse_t) :
  match(v) :
    (x:GIT_SUBMODULE_RECURSE_NO) : print(o, "GIT_SUBMODULE_RECURSE_NO")
    (x:GIT_SUBMODULE_RECURSE_YES) : print(o, "GIT_SUBMODULE_RECURSE_YES")
    (x:GIT_SUBMODULE_RECURSE_ONDEMAND) : print(o, "GIT_SUBMODULE_RECURSE_ONDEMAND")

public defmethod equal? (a:git_submodule_recurse_t, b:git_submodule_recurse_t) -> True|False :
  to-int(a) == to-int(b)

