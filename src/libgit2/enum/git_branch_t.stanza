; This file was auto-generated by lbstanza-wrapper
; Version 0.3.1
; Manual editing would be unwise
defpackage libgit2/enum/git_branch_t :
  import core

public deftype git_branch_t <: Equalable
public deftype GIT_BRANCH_LOCAL <: git_branch_t
public deftype GIT_BRANCH_REMOTE <: git_branch_t
public deftype GIT_BRANCH_ALL <: git_branch_t

public val GIT_BRANCH_LOCAL = new GIT_BRANCH_LOCAL
public val GIT_BRANCH_REMOTE = new GIT_BRANCH_REMOTE
public val GIT_BRANCH_ALL = new GIT_BRANCH_ALL

public defn to-int (v:git_branch_t) -> Int:
  match(v) :
    (x:GIT_BRANCH_LOCAL) : 1
    (x:GIT_BRANCH_REMOTE) : 2
    (x:GIT_BRANCH_ALL) : (to-int(GIT_BRANCH_LOCAL) | to-int(GIT_BRANCH_REMOTE))

public defn git_branch_t (v:Int) -> git_branch_t :
  switch {v == _}:
    1 : GIT_BRANCH_LOCAL
    2 : GIT_BRANCH_REMOTE
    (to-int(GIT_BRANCH_LOCAL) | to-int(GIT_BRANCH_REMOTE)) : GIT_BRANCH_ALL
    else: throw(Exception("git_branch_t: Invalid Enum Value: %_" % [v]))

public lostanza defn git_branch_t (v:int) -> ref<git_branch_t> :
  return git_branch_t(new Int{v})

public defmethod print (o:OutputStream, v:git_branch_t) :
  match(v) :
    (x:GIT_BRANCH_LOCAL) : print(o, "GIT_BRANCH_LOCAL")
    (x:GIT_BRANCH_REMOTE) : print(o, "GIT_BRANCH_REMOTE")
    (x:GIT_BRANCH_ALL) : print(o, "GIT_BRANCH_ALL")

public defmethod equal? (a:git_branch_t, b:git_branch_t) -> True|False :
  to-int(a) == to-int(b)

