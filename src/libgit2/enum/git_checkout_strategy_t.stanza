; This file was auto-generated by lbstanza-wrapper
; Version 0.3.1
; Manual editing would be unwise
defpackage libgit2/enum/git_checkout_strategy_t :
  import core

public deftype git_checkout_strategy_t <: Equalable
public deftype GIT_CHECKOUT_NONE <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_SAFE <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_FORCE <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_RECREATE_MISSING <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_ALLOW_CONFLICTS <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_REMOVE_UNTRACKED <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_REMOVE_IGNORED <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_UPDATE_ONLY <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_DONT_UPDATE_INDEX <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_NO_REFRESH <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_SKIP_UNMERGED <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_USE_OURS <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_USE_THEIRS <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_DONT_OVERWRITE_IGNORED <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_CONFLICT_STYLE_MERGE <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_CONFLICT_STYLE_DIFF3 <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_DONT_REMOVE_EXISTING <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_DONT_WRITE_INDEX <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_DRY_RUN <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_CONFLICT_STYLE_ZDIFF3 <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_UPDATE_SUBMODULES <: git_checkout_strategy_t
public deftype GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED <: git_checkout_strategy_t

public val GIT_CHECKOUT_NONE = new GIT_CHECKOUT_NONE
public val GIT_CHECKOUT_SAFE = new GIT_CHECKOUT_SAFE
public val GIT_CHECKOUT_FORCE = new GIT_CHECKOUT_FORCE
public val GIT_CHECKOUT_RECREATE_MISSING = new GIT_CHECKOUT_RECREATE_MISSING
public val GIT_CHECKOUT_ALLOW_CONFLICTS = new GIT_CHECKOUT_ALLOW_CONFLICTS
public val GIT_CHECKOUT_REMOVE_UNTRACKED = new GIT_CHECKOUT_REMOVE_UNTRACKED
public val GIT_CHECKOUT_REMOVE_IGNORED = new GIT_CHECKOUT_REMOVE_IGNORED
public val GIT_CHECKOUT_UPDATE_ONLY = new GIT_CHECKOUT_UPDATE_ONLY
public val GIT_CHECKOUT_DONT_UPDATE_INDEX = new GIT_CHECKOUT_DONT_UPDATE_INDEX
public val GIT_CHECKOUT_NO_REFRESH = new GIT_CHECKOUT_NO_REFRESH
public val GIT_CHECKOUT_SKIP_UNMERGED = new GIT_CHECKOUT_SKIP_UNMERGED
public val GIT_CHECKOUT_USE_OURS = new GIT_CHECKOUT_USE_OURS
public val GIT_CHECKOUT_USE_THEIRS = new GIT_CHECKOUT_USE_THEIRS
public val GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH = new GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH
public val GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES = new GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES
public val GIT_CHECKOUT_DONT_OVERWRITE_IGNORED = new GIT_CHECKOUT_DONT_OVERWRITE_IGNORED
public val GIT_CHECKOUT_CONFLICT_STYLE_MERGE = new GIT_CHECKOUT_CONFLICT_STYLE_MERGE
public val GIT_CHECKOUT_CONFLICT_STYLE_DIFF3 = new GIT_CHECKOUT_CONFLICT_STYLE_DIFF3
public val GIT_CHECKOUT_DONT_REMOVE_EXISTING = new GIT_CHECKOUT_DONT_REMOVE_EXISTING
public val GIT_CHECKOUT_DONT_WRITE_INDEX = new GIT_CHECKOUT_DONT_WRITE_INDEX
public val GIT_CHECKOUT_DRY_RUN = new GIT_CHECKOUT_DRY_RUN
public val GIT_CHECKOUT_CONFLICT_STYLE_ZDIFF3 = new GIT_CHECKOUT_CONFLICT_STYLE_ZDIFF3
public val GIT_CHECKOUT_UPDATE_SUBMODULES = new GIT_CHECKOUT_UPDATE_SUBMODULES
public val GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED = new GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED

public defn to-int (v:git_checkout_strategy_t) -> Int:
  match(v) :
    (x:GIT_CHECKOUT_NONE) : 0
    (x:GIT_CHECKOUT_SAFE) : (1 << 0)
    (x:GIT_CHECKOUT_FORCE) : (1 << 1)
    (x:GIT_CHECKOUT_RECREATE_MISSING) : (1 << 2)
    (x:GIT_CHECKOUT_ALLOW_CONFLICTS) : (1 << 4)
    (x:GIT_CHECKOUT_REMOVE_UNTRACKED) : (1 << 5)
    (x:GIT_CHECKOUT_REMOVE_IGNORED) : (1 << 6)
    (x:GIT_CHECKOUT_UPDATE_ONLY) : (1 << 7)
    (x:GIT_CHECKOUT_DONT_UPDATE_INDEX) : (1 << 8)
    (x:GIT_CHECKOUT_NO_REFRESH) : (1 << 9)
    (x:GIT_CHECKOUT_SKIP_UNMERGED) : (1 << 10)
    (x:GIT_CHECKOUT_USE_OURS) : (1 << 11)
    (x:GIT_CHECKOUT_USE_THEIRS) : (1 << 12)
    (x:GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH) : (1 << 13)
    (x:GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES) : (1 << 18)
    (x:GIT_CHECKOUT_DONT_OVERWRITE_IGNORED) : (1 << 19)
    (x:GIT_CHECKOUT_CONFLICT_STYLE_MERGE) : (1 << 20)
    (x:GIT_CHECKOUT_CONFLICT_STYLE_DIFF3) : (1 << 21)
    (x:GIT_CHECKOUT_DONT_REMOVE_EXISTING) : (1 << 22)
    (x:GIT_CHECKOUT_DONT_WRITE_INDEX) : (1 << 23)
    (x:GIT_CHECKOUT_DRY_RUN) : (1 << 24)
    (x:GIT_CHECKOUT_CONFLICT_STYLE_ZDIFF3) : (1 << 25)
    (x:GIT_CHECKOUT_UPDATE_SUBMODULES) : (1 << 16)
    (x:GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED) : (1 << 17)

public defn git_checkout_strategy_t (v:Int) -> git_checkout_strategy_t :
  switch {v == _}:
    0 : GIT_CHECKOUT_NONE
    (1 << 0) : GIT_CHECKOUT_SAFE
    (1 << 1) : GIT_CHECKOUT_FORCE
    (1 << 2) : GIT_CHECKOUT_RECREATE_MISSING
    (1 << 4) : GIT_CHECKOUT_ALLOW_CONFLICTS
    (1 << 5) : GIT_CHECKOUT_REMOVE_UNTRACKED
    (1 << 6) : GIT_CHECKOUT_REMOVE_IGNORED
    (1 << 7) : GIT_CHECKOUT_UPDATE_ONLY
    (1 << 8) : GIT_CHECKOUT_DONT_UPDATE_INDEX
    (1 << 9) : GIT_CHECKOUT_NO_REFRESH
    (1 << 10) : GIT_CHECKOUT_SKIP_UNMERGED
    (1 << 11) : GIT_CHECKOUT_USE_OURS
    (1 << 12) : GIT_CHECKOUT_USE_THEIRS
    (1 << 13) : GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH
    (1 << 18) : GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES
    (1 << 19) : GIT_CHECKOUT_DONT_OVERWRITE_IGNORED
    (1 << 20) : GIT_CHECKOUT_CONFLICT_STYLE_MERGE
    (1 << 21) : GIT_CHECKOUT_CONFLICT_STYLE_DIFF3
    (1 << 22) : GIT_CHECKOUT_DONT_REMOVE_EXISTING
    (1 << 23) : GIT_CHECKOUT_DONT_WRITE_INDEX
    (1 << 24) : GIT_CHECKOUT_DRY_RUN
    (1 << 25) : GIT_CHECKOUT_CONFLICT_STYLE_ZDIFF3
    (1 << 16) : GIT_CHECKOUT_UPDATE_SUBMODULES
    (1 << 17) : GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED
    else: throw(Exception("git_checkout_strategy_t: Invalid Enum Value: %_" % [v]))

public lostanza defn git_checkout_strategy_t (v:int) -> ref<git_checkout_strategy_t> :
  return git_checkout_strategy_t(new Int{v})

public defmethod print (o:OutputStream, v:git_checkout_strategy_t) :
  match(v) :
    (x:GIT_CHECKOUT_NONE) : print(o, "GIT_CHECKOUT_NONE")
    (x:GIT_CHECKOUT_SAFE) : print(o, "GIT_CHECKOUT_SAFE")
    (x:GIT_CHECKOUT_FORCE) : print(o, "GIT_CHECKOUT_FORCE")
    (x:GIT_CHECKOUT_RECREATE_MISSING) : print(o, "GIT_CHECKOUT_RECREATE_MISSING")
    (x:GIT_CHECKOUT_ALLOW_CONFLICTS) : print(o, "GIT_CHECKOUT_ALLOW_CONFLICTS")
    (x:GIT_CHECKOUT_REMOVE_UNTRACKED) : print(o, "GIT_CHECKOUT_REMOVE_UNTRACKED")
    (x:GIT_CHECKOUT_REMOVE_IGNORED) : print(o, "GIT_CHECKOUT_REMOVE_IGNORED")
    (x:GIT_CHECKOUT_UPDATE_ONLY) : print(o, "GIT_CHECKOUT_UPDATE_ONLY")
    (x:GIT_CHECKOUT_DONT_UPDATE_INDEX) : print(o, "GIT_CHECKOUT_DONT_UPDATE_INDEX")
    (x:GIT_CHECKOUT_NO_REFRESH) : print(o, "GIT_CHECKOUT_NO_REFRESH")
    (x:GIT_CHECKOUT_SKIP_UNMERGED) : print(o, "GIT_CHECKOUT_SKIP_UNMERGED")
    (x:GIT_CHECKOUT_USE_OURS) : print(o, "GIT_CHECKOUT_USE_OURS")
    (x:GIT_CHECKOUT_USE_THEIRS) : print(o, "GIT_CHECKOUT_USE_THEIRS")
    (x:GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH) : print(o, "GIT_CHECKOUT_DISABLE_PATHSPEC_MATCH")
    (x:GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES) : print(o, "GIT_CHECKOUT_SKIP_LOCKED_DIRECTORIES")
    (x:GIT_CHECKOUT_DONT_OVERWRITE_IGNORED) : print(o, "GIT_CHECKOUT_DONT_OVERWRITE_IGNORED")
    (x:GIT_CHECKOUT_CONFLICT_STYLE_MERGE) : print(o, "GIT_CHECKOUT_CONFLICT_STYLE_MERGE")
    (x:GIT_CHECKOUT_CONFLICT_STYLE_DIFF3) : print(o, "GIT_CHECKOUT_CONFLICT_STYLE_DIFF3")
    (x:GIT_CHECKOUT_DONT_REMOVE_EXISTING) : print(o, "GIT_CHECKOUT_DONT_REMOVE_EXISTING")
    (x:GIT_CHECKOUT_DONT_WRITE_INDEX) : print(o, "GIT_CHECKOUT_DONT_WRITE_INDEX")
    (x:GIT_CHECKOUT_DRY_RUN) : print(o, "GIT_CHECKOUT_DRY_RUN")
    (x:GIT_CHECKOUT_CONFLICT_STYLE_ZDIFF3) : print(o, "GIT_CHECKOUT_CONFLICT_STYLE_ZDIFF3")
    (x:GIT_CHECKOUT_UPDATE_SUBMODULES) : print(o, "GIT_CHECKOUT_UPDATE_SUBMODULES")
    (x:GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED) : print(o, "GIT_CHECKOUT_UPDATE_SUBMODULES_IF_CHANGED")

public defmethod equal? (a:git_checkout_strategy_t, b:git_checkout_strategy_t) -> True|False :
  to-int(a) == to-int(b)
