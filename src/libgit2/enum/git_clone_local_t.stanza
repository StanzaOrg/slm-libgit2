; This file was auto-generated by lbstanza-wrapper
; Version 0.3.1
; Manual editing would be unwise
defpackage libgit2/enum/git_clone_local_t :
  import core

public deftype git_clone_local_t <: Equalable
public deftype GIT_CLONE_LOCAL_AUTO <: git_clone_local_t
public deftype GIT_CLONE_LOCAL <: git_clone_local_t
public deftype GIT_CLONE_NO_LOCAL <: git_clone_local_t
public deftype GIT_CLONE_LOCAL_NO_LINKS <: git_clone_local_t

public val GIT_CLONE_LOCAL_AUTO = new GIT_CLONE_LOCAL_AUTO
public val GIT_CLONE_LOCAL = new GIT_CLONE_LOCAL
public val GIT_CLONE_NO_LOCAL = new GIT_CLONE_NO_LOCAL
public val GIT_CLONE_LOCAL_NO_LINKS = new GIT_CLONE_LOCAL_NO_LINKS

public defn to-int (v:git_clone_local_t) -> Int:
  match(v) :
    (x:GIT_CLONE_LOCAL_AUTO) : 0
    (x:GIT_CLONE_LOCAL) : 1
    (x:GIT_CLONE_NO_LOCAL) : 2
    (x:GIT_CLONE_LOCAL_NO_LINKS) : 3

public defn git_clone_local_t (v:Int) -> git_clone_local_t :
  switch {v == _}:
    0 : GIT_CLONE_LOCAL_AUTO
    1 : GIT_CLONE_LOCAL
    2 : GIT_CLONE_NO_LOCAL
    3 : GIT_CLONE_LOCAL_NO_LINKS
    else: throw(Exception("git_clone_local_t: Invalid Enum Value: %_" % [v]))

public lostanza defn git_clone_local_t (v:int) -> ref<git_clone_local_t> :
  return git_clone_local_t(new Int{v})

public defmethod print (o:OutputStream, v:git_clone_local_t) :
  match(v) :
    (x:GIT_CLONE_LOCAL_AUTO) : print(o, "GIT_CLONE_LOCAL_AUTO")
    (x:GIT_CLONE_LOCAL) : print(o, "GIT_CLONE_LOCAL")
    (x:GIT_CLONE_NO_LOCAL) : print(o, "GIT_CLONE_NO_LOCAL")
    (x:GIT_CLONE_LOCAL_NO_LINKS) : print(o, "GIT_CLONE_LOCAL_NO_LINKS")

public defmethod equal? (a:git_clone_local_t, b:git_clone_local_t) -> True|False :
  to-int(a) == to-int(b)

