; This file was auto-generated by lbstanza-wrapper
; Version 0.3.1
; Manual editing would be unwise
defpackage libgit2/enum/git_error_code :
  import core

public deftype git_error_code <: Equalable
public deftype GIT_OK <: git_error_code
public deftype GIT_ERROR <: git_error_code
public deftype GIT_ENOTFOUND <: git_error_code
public deftype GIT_EEXISTS <: git_error_code
public deftype GIT_EAMBIGUOUS <: git_error_code
public deftype GIT_EBUFS <: git_error_code
public deftype GIT_EUSER <: git_error_code
public deftype GIT_EBAREREPO <: git_error_code
public deftype GIT_EUNBORNBRANCH <: git_error_code
public deftype GIT_EUNMERGED <: git_error_code
public deftype GIT_ENONFASTFORWARD <: git_error_code
public deftype GIT_EINVALIDSPEC <: git_error_code
public deftype GIT_ECONFLICT <: git_error_code
public deftype GIT_ELOCKED <: git_error_code
public deftype GIT_EMODIFIED <: git_error_code
public deftype GIT_EAUTH <: git_error_code
public deftype GIT_ECERTIFICATE <: git_error_code
public deftype GIT_EAPPLIED <: git_error_code
public deftype GIT_EPEEL <: git_error_code
public deftype GIT_EEOF <: git_error_code
public deftype GIT_EINVALID <: git_error_code
public deftype GIT_EUNCOMMITTED <: git_error_code
public deftype GIT_EDIRECTORY <: git_error_code
public deftype GIT_EMERGECONFLICT <: git_error_code
public deftype GIT_PASSTHROUGH <: git_error_code
public deftype GIT_ITEROVER <: git_error_code
public deftype GIT_RETRY <: git_error_code
public deftype GIT_EMISMATCH <: git_error_code
public deftype GIT_EINDEXDIRTY <: git_error_code
public deftype GIT_EAPPLYFAIL <: git_error_code
public deftype GIT_EOWNER <: git_error_code
public deftype GIT_TIMEOUT <: git_error_code

public val GIT_OK = new GIT_OK
public val GIT_ERROR = new GIT_ERROR
public val GIT_ENOTFOUND = new GIT_ENOTFOUND
public val GIT_EEXISTS = new GIT_EEXISTS
public val GIT_EAMBIGUOUS = new GIT_EAMBIGUOUS
public val GIT_EBUFS = new GIT_EBUFS
public val GIT_EUSER = new GIT_EUSER
public val GIT_EBAREREPO = new GIT_EBAREREPO
public val GIT_EUNBORNBRANCH = new GIT_EUNBORNBRANCH
public val GIT_EUNMERGED = new GIT_EUNMERGED
public val GIT_ENONFASTFORWARD = new GIT_ENONFASTFORWARD
public val GIT_EINVALIDSPEC = new GIT_EINVALIDSPEC
public val GIT_ECONFLICT = new GIT_ECONFLICT
public val GIT_ELOCKED = new GIT_ELOCKED
public val GIT_EMODIFIED = new GIT_EMODIFIED
public val GIT_EAUTH = new GIT_EAUTH
public val GIT_ECERTIFICATE = new GIT_ECERTIFICATE
public val GIT_EAPPLIED = new GIT_EAPPLIED
public val GIT_EPEEL = new GIT_EPEEL
public val GIT_EEOF = new GIT_EEOF
public val GIT_EINVALID = new GIT_EINVALID
public val GIT_EUNCOMMITTED = new GIT_EUNCOMMITTED
public val GIT_EDIRECTORY = new GIT_EDIRECTORY
public val GIT_EMERGECONFLICT = new GIT_EMERGECONFLICT
public val GIT_PASSTHROUGH = new GIT_PASSTHROUGH
public val GIT_ITEROVER = new GIT_ITEROVER
public val GIT_RETRY = new GIT_RETRY
public val GIT_EMISMATCH = new GIT_EMISMATCH
public val GIT_EINDEXDIRTY = new GIT_EINDEXDIRTY
public val GIT_EAPPLYFAIL = new GIT_EAPPLYFAIL
public val GIT_EOWNER = new GIT_EOWNER
public val GIT_TIMEOUT = new GIT_TIMEOUT

public defn to-int (v:git_error_code) -> Int:
  match(v) :
    (x:GIT_OK) : 0
    (x:GIT_ERROR) : -1
    (x:GIT_ENOTFOUND) : -3
    (x:GIT_EEXISTS) : -4
    (x:GIT_EAMBIGUOUS) : -5
    (x:GIT_EBUFS) : -6
    (x:GIT_EUSER) : -7
    (x:GIT_EBAREREPO) : -8
    (x:GIT_EUNBORNBRANCH) : -9
    (x:GIT_EUNMERGED) : -10
    (x:GIT_ENONFASTFORWARD) : -11
    (x:GIT_EINVALIDSPEC) : -12
    (x:GIT_ECONFLICT) : -13
    (x:GIT_ELOCKED) : -14
    (x:GIT_EMODIFIED) : -15
    (x:GIT_EAUTH) : -16
    (x:GIT_ECERTIFICATE) : -17
    (x:GIT_EAPPLIED) : -18
    (x:GIT_EPEEL) : -19
    (x:GIT_EEOF) : -20
    (x:GIT_EINVALID) : -21
    (x:GIT_EUNCOMMITTED) : -22
    (x:GIT_EDIRECTORY) : -23
    (x:GIT_EMERGECONFLICT) : -24
    (x:GIT_PASSTHROUGH) : -30
    (x:GIT_ITEROVER) : -31
    (x:GIT_RETRY) : -32
    (x:GIT_EMISMATCH) : -33
    (x:GIT_EINDEXDIRTY) : -34
    (x:GIT_EAPPLYFAIL) : -35
    (x:GIT_EOWNER) : -36
    (x:GIT_TIMEOUT) : -37

public defn git_error_code (v:Int) -> git_error_code :
  switch {v == _}:
    0 : GIT_OK
    -1 : GIT_ERROR
    -3 : GIT_ENOTFOUND
    -4 : GIT_EEXISTS
    -5 : GIT_EAMBIGUOUS
    -6 : GIT_EBUFS
    -7 : GIT_EUSER
    -8 : GIT_EBAREREPO
    -9 : GIT_EUNBORNBRANCH
    -10 : GIT_EUNMERGED
    -11 : GIT_ENONFASTFORWARD
    -12 : GIT_EINVALIDSPEC
    -13 : GIT_ECONFLICT
    -14 : GIT_ELOCKED
    -15 : GIT_EMODIFIED
    -16 : GIT_EAUTH
    -17 : GIT_ECERTIFICATE
    -18 : GIT_EAPPLIED
    -19 : GIT_EPEEL
    -20 : GIT_EEOF
    -21 : GIT_EINVALID
    -22 : GIT_EUNCOMMITTED
    -23 : GIT_EDIRECTORY
    -24 : GIT_EMERGECONFLICT
    -30 : GIT_PASSTHROUGH
    -31 : GIT_ITEROVER
    -32 : GIT_RETRY
    -33 : GIT_EMISMATCH
    -34 : GIT_EINDEXDIRTY
    -35 : GIT_EAPPLYFAIL
    -36 : GIT_EOWNER
    -37 : GIT_TIMEOUT
    else: throw(Exception("git_error_code: Invalid Enum Value: %_" % [v]))

public lostanza defn git_error_code (v:int) -> ref<git_error_code> :
  return git_error_code(new Int{v})

public defmethod print (o:OutputStream, v:git_error_code) :
  match(v) :
    (x:GIT_OK) : print(o, "GIT_OK")
    (x:GIT_ERROR) : print(o, "GIT_ERROR")
    (x:GIT_ENOTFOUND) : print(o, "GIT_ENOTFOUND")
    (x:GIT_EEXISTS) : print(o, "GIT_EEXISTS")
    (x:GIT_EAMBIGUOUS) : print(o, "GIT_EAMBIGUOUS")
    (x:GIT_EBUFS) : print(o, "GIT_EBUFS")
    (x:GIT_EUSER) : print(o, "GIT_EUSER")
    (x:GIT_EBAREREPO) : print(o, "GIT_EBAREREPO")
    (x:GIT_EUNBORNBRANCH) : print(o, "GIT_EUNBORNBRANCH")
    (x:GIT_EUNMERGED) : print(o, "GIT_EUNMERGED")
    (x:GIT_ENONFASTFORWARD) : print(o, "GIT_ENONFASTFORWARD")
    (x:GIT_EINVALIDSPEC) : print(o, "GIT_EINVALIDSPEC")
    (x:GIT_ECONFLICT) : print(o, "GIT_ECONFLICT")
    (x:GIT_ELOCKED) : print(o, "GIT_ELOCKED")
    (x:GIT_EMODIFIED) : print(o, "GIT_EMODIFIED")
    (x:GIT_EAUTH) : print(o, "GIT_EAUTH")
    (x:GIT_ECERTIFICATE) : print(o, "GIT_ECERTIFICATE")
    (x:GIT_EAPPLIED) : print(o, "GIT_EAPPLIED")
    (x:GIT_EPEEL) : print(o, "GIT_EPEEL")
    (x:GIT_EEOF) : print(o, "GIT_EEOF")
    (x:GIT_EINVALID) : print(o, "GIT_EINVALID")
    (x:GIT_EUNCOMMITTED) : print(o, "GIT_EUNCOMMITTED")
    (x:GIT_EDIRECTORY) : print(o, "GIT_EDIRECTORY")
    (x:GIT_EMERGECONFLICT) : print(o, "GIT_EMERGECONFLICT")
    (x:GIT_PASSTHROUGH) : print(o, "GIT_PASSTHROUGH")
    (x:GIT_ITEROVER) : print(o, "GIT_ITEROVER")
    (x:GIT_RETRY) : print(o, "GIT_RETRY")
    (x:GIT_EMISMATCH) : print(o, "GIT_EMISMATCH")
    (x:GIT_EINDEXDIRTY) : print(o, "GIT_EINDEXDIRTY")
    (x:GIT_EAPPLYFAIL) : print(o, "GIT_EAPPLYFAIL")
    (x:GIT_EOWNER) : print(o, "GIT_EOWNER")
    (x:GIT_TIMEOUT) : print(o, "GIT_TIMEOUT")

public defmethod equal? (a:git_error_code, b:git_error_code) -> True|False :
  to-int(a) == to-int(b)

public defn to-message (e:git_error_code) -> String :
  switch(e) :
    GIT_OK : "No error"
    GIT_ERROR : "Generic error"
    GIT_ENOTFOUND : "Requested object could not be found"
    GIT_EEXISTS : "Object already exists"
    GIT_EAMBIGUOUS : "More than one object matches"
    GIT_EBUFS : "Output buffer too short to hold data"
    GIT_EUSER : "User-defined error"
    GIT_EBAREREPO : "Operation not allowed on bare repository"
    GIT_EUNBORNBRANCH : "HEAD refers to branch with no commits"
    GIT_EUNMERGED : "Merge in progress"
    GIT_ENONFASTFORWARD : "Reference was not fast-forwardable"
    GIT_EINVALIDSPEC : "Name/ref spec was not in a valid format"
    GIT_ECONFLICT : "Checkout conflicts present"
    GIT_ELOCKED : "Lock file already locked"
    GIT_EMODIFIED : "Reference value does not match expected"
    GIT_EAUTH : "Authentication error"
    GIT_ECERTIFICATE : "Server certificate is invalid"
    GIT_EAPPLIED : "Patch/merge has already been applied"
    GIT_EPEEL : "Peel operation is not possible"
    GIT_EEOF : "Unexpected EOF"
    GIT_EINVALID : "Invalid operation or input"
    GIT_EUNCOMMITTED : "Uncommitted changes in index"
    GIT_EDIRECTORY : "Operation not valid for a directory"
    GIT_EMERGECONFLICT : "Merge conflicts present"
    GIT_PASSTHROUGH : "A user-configured callback refused to act"
    GIT_ITEROVER : "End of iteration with iterator"
    GIT_RETRY : "libgit2 internal error"
    GIT_EMISMATCH : "Hashsum mismatch in object"
    GIT_EINDEXDIRTY : "Index is dirty"
    GIT_EAPPLYFAIL : "Patch application failed"
    GIT_EOWNER : "The object is not owned by the current user"
    GIT_TIMEOUT : "Timed out"
