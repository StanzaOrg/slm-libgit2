; This file was auto-generated by lbstanza-wrapper
; Version 0.3.1
; Manual editing would be unwise
defpackage libgit2/enum/git_error_t :
  import core

public deftype git_error_t <: Equalable
public deftype GIT_ERROR_NONE <: git_error_t
public deftype GIT_ERROR_NOMEMORY <: git_error_t
public deftype GIT_ERROR_OS <: git_error_t
public deftype GIT_ERROR_INVALID <: git_error_t
public deftype GIT_ERROR_REFERENCE <: git_error_t
public deftype GIT_ERROR_ZLIB <: git_error_t
public deftype GIT_ERROR_REPOSITORY <: git_error_t
public deftype GIT_ERROR_CONFIG <: git_error_t
public deftype GIT_ERROR_REGEX <: git_error_t
public deftype GIT_ERROR_ODB <: git_error_t
public deftype GIT_ERROR_INDEX <: git_error_t
public deftype GIT_ERROR_OBJECT <: git_error_t
public deftype GIT_ERROR_NET <: git_error_t
public deftype GIT_ERROR_TAG <: git_error_t
public deftype GIT_ERROR_TREE <: git_error_t
public deftype GIT_ERROR_INDEXER <: git_error_t
public deftype GIT_ERROR_SSL <: git_error_t
public deftype GIT_ERROR_SUBMODULE <: git_error_t
public deftype GIT_ERROR_THREAD <: git_error_t
public deftype GIT_ERROR_STASH <: git_error_t
public deftype GIT_ERROR_CHECKOUT <: git_error_t
public deftype GIT_ERROR_FETCHHEAD <: git_error_t
public deftype GIT_ERROR_MERGE <: git_error_t
public deftype GIT_ERROR_SSH <: git_error_t
public deftype GIT_ERROR_FILTER <: git_error_t
public deftype GIT_ERROR_REVERT <: git_error_t
public deftype GIT_ERROR_CALLBACK <: git_error_t
public deftype GIT_ERROR_CHERRYPICK <: git_error_t
public deftype GIT_ERROR_DESCRIBE <: git_error_t
public deftype GIT_ERROR_REBASE <: git_error_t
public deftype GIT_ERROR_FILESYSTEM <: git_error_t
public deftype GIT_ERROR_PATCH <: git_error_t
public deftype GIT_ERROR_WORKTREE <: git_error_t
public deftype GIT_ERROR_SHA <: git_error_t
public deftype GIT_ERROR_HTTP <: git_error_t
public deftype GIT_ERROR_INTERNAL <: git_error_t
public deftype GIT_ERROR_GRAFTS <: git_error_t

public val GIT_ERROR_NONE = new GIT_ERROR_NONE
public val GIT_ERROR_NOMEMORY = new GIT_ERROR_NOMEMORY
public val GIT_ERROR_OS = new GIT_ERROR_OS
public val GIT_ERROR_INVALID = new GIT_ERROR_INVALID
public val GIT_ERROR_REFERENCE = new GIT_ERROR_REFERENCE
public val GIT_ERROR_ZLIB = new GIT_ERROR_ZLIB
public val GIT_ERROR_REPOSITORY = new GIT_ERROR_REPOSITORY
public val GIT_ERROR_CONFIG = new GIT_ERROR_CONFIG
public val GIT_ERROR_REGEX = new GIT_ERROR_REGEX
public val GIT_ERROR_ODB = new GIT_ERROR_ODB
public val GIT_ERROR_INDEX = new GIT_ERROR_INDEX
public val GIT_ERROR_OBJECT = new GIT_ERROR_OBJECT
public val GIT_ERROR_NET = new GIT_ERROR_NET
public val GIT_ERROR_TAG = new GIT_ERROR_TAG
public val GIT_ERROR_TREE = new GIT_ERROR_TREE
public val GIT_ERROR_INDEXER = new GIT_ERROR_INDEXER
public val GIT_ERROR_SSL = new GIT_ERROR_SSL
public val GIT_ERROR_SUBMODULE = new GIT_ERROR_SUBMODULE
public val GIT_ERROR_THREAD = new GIT_ERROR_THREAD
public val GIT_ERROR_STASH = new GIT_ERROR_STASH
public val GIT_ERROR_CHECKOUT = new GIT_ERROR_CHECKOUT
public val GIT_ERROR_FETCHHEAD = new GIT_ERROR_FETCHHEAD
public val GIT_ERROR_MERGE = new GIT_ERROR_MERGE
public val GIT_ERROR_SSH = new GIT_ERROR_SSH
public val GIT_ERROR_FILTER = new GIT_ERROR_FILTER
public val GIT_ERROR_REVERT = new GIT_ERROR_REVERT
public val GIT_ERROR_CALLBACK = new GIT_ERROR_CALLBACK
public val GIT_ERROR_CHERRYPICK = new GIT_ERROR_CHERRYPICK
public val GIT_ERROR_DESCRIBE = new GIT_ERROR_DESCRIBE
public val GIT_ERROR_REBASE = new GIT_ERROR_REBASE
public val GIT_ERROR_FILESYSTEM = new GIT_ERROR_FILESYSTEM
public val GIT_ERROR_PATCH = new GIT_ERROR_PATCH
public val GIT_ERROR_WORKTREE = new GIT_ERROR_WORKTREE
public val GIT_ERROR_SHA = new GIT_ERROR_SHA
public val GIT_ERROR_HTTP = new GIT_ERROR_HTTP
public val GIT_ERROR_INTERNAL = new GIT_ERROR_INTERNAL
public val GIT_ERROR_GRAFTS = new GIT_ERROR_GRAFTS

public defn to-int (v:git_error_t) -> Int:
  match(v) :
    (x:GIT_ERROR_NONE) : 0
    (x:GIT_ERROR_NOMEMORY) : 1
    (x:GIT_ERROR_OS) : 2
    (x:GIT_ERROR_INVALID) : 3
    (x:GIT_ERROR_REFERENCE) : 4
    (x:GIT_ERROR_ZLIB) : 5
    (x:GIT_ERROR_REPOSITORY) : 6
    (x:GIT_ERROR_CONFIG) : 7
    (x:GIT_ERROR_REGEX) : 8
    (x:GIT_ERROR_ODB) : 9
    (x:GIT_ERROR_INDEX) : 10
    (x:GIT_ERROR_OBJECT) : 11
    (x:GIT_ERROR_NET) : 12
    (x:GIT_ERROR_TAG) : 13
    (x:GIT_ERROR_TREE) : 14
    (x:GIT_ERROR_INDEXER) : 15
    (x:GIT_ERROR_SSL) : 16
    (x:GIT_ERROR_SUBMODULE) : 17
    (x:GIT_ERROR_THREAD) : 18
    (x:GIT_ERROR_STASH) : 19
    (x:GIT_ERROR_CHECKOUT) : 20
    (x:GIT_ERROR_FETCHHEAD) : 21
    (x:GIT_ERROR_MERGE) : 22
    (x:GIT_ERROR_SSH) : 23
    (x:GIT_ERROR_FILTER) : 24
    (x:GIT_ERROR_REVERT) : 25
    (x:GIT_ERROR_CALLBACK) : 26
    (x:GIT_ERROR_CHERRYPICK) : 27
    (x:GIT_ERROR_DESCRIBE) : 28
    (x:GIT_ERROR_REBASE) : 29
    (x:GIT_ERROR_FILESYSTEM) : 30
    (x:GIT_ERROR_PATCH) : 31
    (x:GIT_ERROR_WORKTREE) : 32
    (x:GIT_ERROR_SHA) : 33
    (x:GIT_ERROR_HTTP) : 34
    (x:GIT_ERROR_INTERNAL) : 35
    (x:GIT_ERROR_GRAFTS) : 36

public defn git_error_t (v:Int) -> git_error_t :
  switch {v == _}:
    0 : GIT_ERROR_NONE
    1 : GIT_ERROR_NOMEMORY
    2 : GIT_ERROR_OS
    3 : GIT_ERROR_INVALID
    4 : GIT_ERROR_REFERENCE
    5 : GIT_ERROR_ZLIB
    6 : GIT_ERROR_REPOSITORY
    7 : GIT_ERROR_CONFIG
    8 : GIT_ERROR_REGEX
    9 : GIT_ERROR_ODB
    10 : GIT_ERROR_INDEX
    11 : GIT_ERROR_OBJECT
    12 : GIT_ERROR_NET
    13 : GIT_ERROR_TAG
    14 : GIT_ERROR_TREE
    15 : GIT_ERROR_INDEXER
    16 : GIT_ERROR_SSL
    17 : GIT_ERROR_SUBMODULE
    18 : GIT_ERROR_THREAD
    19 : GIT_ERROR_STASH
    20 : GIT_ERROR_CHECKOUT
    21 : GIT_ERROR_FETCHHEAD
    22 : GIT_ERROR_MERGE
    23 : GIT_ERROR_SSH
    24 : GIT_ERROR_FILTER
    25 : GIT_ERROR_REVERT
    26 : GIT_ERROR_CALLBACK
    27 : GIT_ERROR_CHERRYPICK
    28 : GIT_ERROR_DESCRIBE
    29 : GIT_ERROR_REBASE
    30 : GIT_ERROR_FILESYSTEM
    31 : GIT_ERROR_PATCH
    32 : GIT_ERROR_WORKTREE
    33 : GIT_ERROR_SHA
    34 : GIT_ERROR_HTTP
    35 : GIT_ERROR_INTERNAL
    36 : GIT_ERROR_GRAFTS
    else: throw(Exception("git_error_t: Invalid Enum Value: %_" % [v]))

public lostanza defn git_error_t (v:int) -> ref<git_error_t> :
  return git_error_t(new Int{v})

public defmethod print (o:OutputStream, v:git_error_t) :
  match(v) :
    (x:GIT_ERROR_NONE) : print(o, "GIT_ERROR_NONE")
    (x:GIT_ERROR_NOMEMORY) : print(o, "GIT_ERROR_NOMEMORY")
    (x:GIT_ERROR_OS) : print(o, "GIT_ERROR_OS")
    (x:GIT_ERROR_INVALID) : print(o, "GIT_ERROR_INVALID")
    (x:GIT_ERROR_REFERENCE) : print(o, "GIT_ERROR_REFERENCE")
    (x:GIT_ERROR_ZLIB) : print(o, "GIT_ERROR_ZLIB")
    (x:GIT_ERROR_REPOSITORY) : print(o, "GIT_ERROR_REPOSITORY")
    (x:GIT_ERROR_CONFIG) : print(o, "GIT_ERROR_CONFIG")
    (x:GIT_ERROR_REGEX) : print(o, "GIT_ERROR_REGEX")
    (x:GIT_ERROR_ODB) : print(o, "GIT_ERROR_ODB")
    (x:GIT_ERROR_INDEX) : print(o, "GIT_ERROR_INDEX")
    (x:GIT_ERROR_OBJECT) : print(o, "GIT_ERROR_OBJECT")
    (x:GIT_ERROR_NET) : print(o, "GIT_ERROR_NET")
    (x:GIT_ERROR_TAG) : print(o, "GIT_ERROR_TAG")
    (x:GIT_ERROR_TREE) : print(o, "GIT_ERROR_TREE")
    (x:GIT_ERROR_INDEXER) : print(o, "GIT_ERROR_INDEXER")
    (x:GIT_ERROR_SSL) : print(o, "GIT_ERROR_SSL")
    (x:GIT_ERROR_SUBMODULE) : print(o, "GIT_ERROR_SUBMODULE")
    (x:GIT_ERROR_THREAD) : print(o, "GIT_ERROR_THREAD")
    (x:GIT_ERROR_STASH) : print(o, "GIT_ERROR_STASH")
    (x:GIT_ERROR_CHECKOUT) : print(o, "GIT_ERROR_CHECKOUT")
    (x:GIT_ERROR_FETCHHEAD) : print(o, "GIT_ERROR_FETCHHEAD")
    (x:GIT_ERROR_MERGE) : print(o, "GIT_ERROR_MERGE")
    (x:GIT_ERROR_SSH) : print(o, "GIT_ERROR_SSH")
    (x:GIT_ERROR_FILTER) : print(o, "GIT_ERROR_FILTER")
    (x:GIT_ERROR_REVERT) : print(o, "GIT_ERROR_REVERT")
    (x:GIT_ERROR_CALLBACK) : print(o, "GIT_ERROR_CALLBACK")
    (x:GIT_ERROR_CHERRYPICK) : print(o, "GIT_ERROR_CHERRYPICK")
    (x:GIT_ERROR_DESCRIBE) : print(o, "GIT_ERROR_DESCRIBE")
    (x:GIT_ERROR_REBASE) : print(o, "GIT_ERROR_REBASE")
    (x:GIT_ERROR_FILESYSTEM) : print(o, "GIT_ERROR_FILESYSTEM")
    (x:GIT_ERROR_PATCH) : print(o, "GIT_ERROR_PATCH")
    (x:GIT_ERROR_WORKTREE) : print(o, "GIT_ERROR_WORKTREE")
    (x:GIT_ERROR_SHA) : print(o, "GIT_ERROR_SHA")
    (x:GIT_ERROR_HTTP) : print(o, "GIT_ERROR_HTTP")
    (x:GIT_ERROR_INTERNAL) : print(o, "GIT_ERROR_INTERNAL")
    (x:GIT_ERROR_GRAFTS) : print(o, "GIT_ERROR_GRAFTS")

public defmethod equal? (a:git_error_t, b:git_error_t) -> True|False :
  to-int(a) == to-int(b)

