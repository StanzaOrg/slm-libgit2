; This file was auto-generated by lbstanza-wrapper
; Version 0.3.1
; Manual editing would be unwise
defpackage libgit2/enum/git_feature_t :
  import core

public deftype git_feature_t <: Equalable
public deftype GIT_FEATURE_THREADS <: git_feature_t
public deftype GIT_FEATURE_HTTPS <: git_feature_t
public deftype GIT_FEATURE_SSH <: git_feature_t
public deftype GIT_FEATURE_NSEC <: git_feature_t

public val GIT_FEATURE_THREADS = new GIT_FEATURE_THREADS
public val GIT_FEATURE_HTTPS = new GIT_FEATURE_HTTPS
public val GIT_FEATURE_SSH = new GIT_FEATURE_SSH
public val GIT_FEATURE_NSEC = new GIT_FEATURE_NSEC

public defn to-int (v:git_feature_t) -> Int:
  match(v) :
    (x:GIT_FEATURE_THREADS) : (1 << 0)
    (x:GIT_FEATURE_HTTPS) : (1 << 1)
    (x:GIT_FEATURE_SSH) : (1 << 2)
    (x:GIT_FEATURE_NSEC) : (1 << 3)

public defn git_feature_t (v:Int) -> git_feature_t :
  switch {v == _}:
    (1 << 0) : GIT_FEATURE_THREADS
    (1 << 1) : GIT_FEATURE_HTTPS
    (1 << 2) : GIT_FEATURE_SSH
    (1 << 3) : GIT_FEATURE_NSEC
    else: throw(Exception("git_feature_t: Invalid Enum Value: %_" % [v]))

public lostanza defn git_feature_t (v:int) -> ref<git_feature_t> :
  return git_feature_t(new Int{v})

public defmethod print (o:OutputStream, v:git_feature_t) :
  match(v) :
    (x:GIT_FEATURE_THREADS) : print(o, "GIT_FEATURE_THREADS")
    (x:GIT_FEATURE_HTTPS) : print(o, "GIT_FEATURE_HTTPS")
    (x:GIT_FEATURE_SSH) : print(o, "GIT_FEATURE_SSH")
    (x:GIT_FEATURE_NSEC) : print(o, "GIT_FEATURE_NSEC")

public defmethod equal? (a:git_feature_t, b:git_feature_t) -> True|False :
  to-int(a) == to-int(b)

