defpackage libgit2 :
  import core
  import collections

  forward libgit2/enum/git_branch_t
  forward libgit2/enum/git_checkout_notify_t
  forward libgit2/enum/git_checkout_strategy_t
  forward libgit2/enum/git_clone_local_t
  forward libgit2/enum/git_delta_t
  forward libgit2/enum/git_diff_binary_t
  forward libgit2/enum/git_diff_find_t
  forward libgit2/enum/git_diff_flag_t
  forward libgit2/enum/git_diff_format_t
  forward libgit2/enum/git_diff_line_t
  forward libgit2/enum/git_diff_option_t
  forward libgit2/enum/git_diff_stats_format_t
  forward libgit2/enum/git_error_code
  forward libgit2/enum/git_error_t
  forward libgit2/enum/git_feature_t
  forward libgit2/enum/git_fetch_prune_t
  forward libgit2/enum/git_filemode_t
  forward libgit2/enum/git_libgit2_opt_t
  forward libgit2/enum/git_object_t
  forward libgit2/enum/git_proxy_t
  forward libgit2/enum/git_reference_format_t
  forward libgit2/enum/git_reference_t
  forward libgit2/enum/git_remote_autotag_option_t
  forward libgit2/enum/git_remote_redirect_t
  forward libgit2/enum/git_submodule_ignore_t
  forward libgit2/enum/git_submodule_recurse_t
  forward libgit2/enum/git_submodule_update_t
  forward libgit2/enum/git_tree_update_t
  forward libgit2/enum/git_treewalk_mode

;==============================================
;================= C Externs ==================
;==============================================

; ------------------------------------------------------------------------------
; --- git2/global.h - Global state  --------------------------------------------
; ------------------------------------------------------------------------------

;; int git_libgit2_init(void);
extern git_libgit2_init : () -> int

;; int git_libgit2_shutdown(void);
extern git_libgit2_shutdown : () -> int


; ------------------------------------------------------------------------------
; --- git2/common.h - Git common platform definition ---------------------------
; ------------------------------------------------------------------------------

;; typedef struct git_repository git_repository;
lostanza deftype GIT_REPOSITORY :
  gr-ptr: ptr<?>

;; int git_libgit2_version(int *major, int *minor, int *rev);

;; const char * git_libgit2_prerelease(void);

;; enum git_feature_t;
; see libgit2/enum/git_feature_t

;; int git_libgit2_features(void);

;; enum git_libgit2_opt_t;
; see libgit2/enum/git_libgit2_opt_t

;; int git_libgit2_opts(int option, ...);


; ------------------------------------------------------------------------------
; --- git2/strarray.h - Git string array routines ------------------------------
; ------------------------------------------------------------------------------

;; typedef struct git_strarray {char **strings; size_t count;} git_strarray;
lostanza deftype GIT_STRARRAY :
  strings : ptr<ptr<byte>>
  count   : int

;; void git_strarray_dispose(git_strarray *array);
extern git_strarray_dispose : (ptr<GIT_STRARRAY>) -> int


; ------------------------------------------------------------------------------
; --- git2/repository.h - Git repository management routines  ------------------
; ------------------------------------------------------------------------------

;; int git_repository_open(git_repository **out, const char *path);

;; int git_repository_open_from_worktree(git_repository **out, git_worktree *wt);

;; ifdef GIT_EXPERIMENTAL_SHA256
;; int git_repository_wrap_odb(git_repository **out, git_odb *odb, git_oid_t oid_type);

;; int git_repository_wrap_odb(git_repository **out, git_odb *odb);

;; int git_repository_discover(git_buf *out, const char *start_path, int across_fs, const char *ceiling_dirs);

;; enum git_repository_open_flag_t;
;;   GIT_REPOSITORY_OPEN_NO_SEARCH
;;   GIT_REPOSITORY_OPEN_CROSS_FS
;;   GIT_REPOSITORY_OPEN_BARE
;;   GIT_REPOSITORY_OPEN_NO_DOTGIT
;;   GIT_REPOSITORY_OPEN_FROM_ENV

;; int git_repository_open_ext(git_repository **out, const char *path, unsigned int flags, const char *ceiling_dirs);
;git_repository_open_ext(&repo, git_dir, 0, NULL);

;; int git_repository_open_bare(git_repository **out, const char *bare_path);

;; void git_repository_free(git_repository *repo);
extern git_repository_free : (ptr<GIT_REPOSITORY>) -> int

;; int git_repository_init(git_repository **out, const char *path, unsigned is_bare);

;; enum git_repository_init_flag_t;
;;   GIT_REPOSITORY_INIT_BARE
;;   GIT_REPOSITORY_INIT_NO_REINIT
;;   GIT_REPOSITORY_INIT_NO_DOTGIT_DIR
;;   GIT_REPOSITORY_INIT_MKDIR
;;   GIT_REPOSITORY_INIT_MKPATH
;;   GIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE
;;   GIT_REPOSITORY_INIT_RELATIVE_GITLINK

;; enum git_repository_init_mode_t;
;;   GIT_REPOSITORY_INIT_SHARED_UMASK
;;   GIT_REPOSITORY_INIT_SHARED_GROUP
;;   GIT_REPOSITORY_INIT_SHARED_ALL

;; typedef struct git_repository_init_options
;;   unsigned int version;
;;   uint32_t    flags;
;;   uint32_t    mode;
;;   const char *workdir_path;
;;   const char *description;
;;   const char *template_path;
;;   const char *initial_head;
;;   const char *origin_url;
;; #ifdef GIT_EXPERIMENTAL_SHA256
;;   git_oid_t oid_type;
;; #endif

;; int git_repository_init_options_init(
;; int git_repository_init_ext(
;; int git_repository_head(git_reference **out, git_repository *repo);
;; int git_repository_head_for_worktree(git_reference **out, git_repository *repo,
;; int git_repository_head_detached(git_repository *repo);
;; int git_repository_head_detached_for_worktree(git_repository *repo,
;; int git_repository_head_unborn(git_repository *repo);
;; int git_repository_is_empty(git_repository *repo);

;; enum git_repository_item_t
;;   GIT_REPOSITORY_ITEM_GITDIR
;;   GIT_REPOSITORY_ITEM_WORKDIR
;;   GIT_REPOSITORY_ITEM_COMMONDIR
;;   GIT_REPOSITORY_ITEM_INDEX
;;   GIT_REPOSITORY_ITEM_OBJECTS
;;   GIT_REPOSITORY_ITEM_REFS
;;   GIT_REPOSITORY_ITEM_PACKED_REFS
;;   GIT_REPOSITORY_ITEM_REMOTES
;;   GIT_REPOSITORY_ITEM_CONFIG
;;   GIT_REPOSITORY_ITEM_INFO
;;   GIT_REPOSITORY_ITEM_HOOKS
;;   GIT_REPOSITORY_ITEM_LOGS
;;   GIT_REPOSITORY_ITEM_MODULES
;;   GIT_REPOSITORY_ITEM_WORKTREES
;;   GIT_REPOSITORY_ITEM__LAS

;; int git_repository_item_path(git_buf *out, const git_repository *repo, git_repository_item_t item);
;; const char * git_repository_path(const git_repository *repo);
;; const char * git_repository_workdir(const git_repository *repo);
;; const char * git_repository_commondir(const git_repository *repo);
;; int git_repository_set_workdir(
;; int git_repository_is_bare(const git_repository *repo);
;; int git_repository_is_worktree(const git_repository *repo);
;; int git_repository_config(git_config **out, git_repository *repo);
;; int git_repository_config_snapshot(git_config **out, git_repository *repo);
;; int git_repository_odb(git_odb **out, git_repository *repo);
;; int git_repository_refdb(git_refdb **out, git_repository *repo);
;; int git_repository_index(git_index **out, git_repository *repo);
;; int git_repository_message(git_buf *out, git_repository *repo);
;; int git_repository_message_remove(git_repository *repo);
;; int git_repository_state_cleanup(git_repository *repo);

;; typedef int GIT_CALLBACK(git_repository_fetchhead_foreach_cb)(const char *ref_name, const char *remote_url,
;;                          const git_oid *oid, unsigned int is_merge, void *payload);

;; int git_repository_fetchhead_foreach(

;; typedef int GIT_CALLBACK(git_repository_mergehead_foreach_cb)(const git_oid *oid, void *payload);

;; int git_repository_mergehead_foreach(

;; int git_repository_hashfile(
;; int git_repository_set_head(
;; int git_repository_set_head_detached(
;; int git_repository_set_head_detached_from_annotated(
;; int git_repository_detach_head(

;; enum git_repository_state_t
;;   GIT_REPOSITORY_STATE_NONE
;;   GIT_REPOSITORY_STATE_MERGE
;;   GIT_REPOSITORY_STATE_REVERT
;;   GIT_REPOSITORY_STATE_REVERT_SEQUENCE
;;   GIT_REPOSITORY_STATE_CHERRYPICK
;;   GIT_REPOSITORY_STATE_CHERRYPICK_SEQUENCE
;;   GIT_REPOSITORY_STATE_BISECT
;;   GIT_REPOSITORY_STATE_REBASE
;;   GIT_REPOSITORY_STATE_REBASE_INTERACTIVE
;;   GIT_REPOSITORY_STATE_REBASE_MERGE
;;   GIT_REPOSITORY_STATE_APPLY_MAILBOX
;;   GIT_REPOSITORY_STATE_APPLY_MAILBOX_OR_REBAS

;; int git_repository_state(git_repository *repo);
;; int git_repository_set_namespace(git_repository *repo, const char *nmspace);
;; const char * git_repository_get_namespace(git_repository *repo);
;; int git_repository_is_shallow(git_repository *repo);
;; int git_repository_ident(const char **name, const char **email, const git_repository *repo);
;; int git_repository_set_ident(git_repository *repo, const char *name, const char *email);
;; git_oid_t git_repository_oid_type(git_repository *repo);


; ------------------------------------------------------------------------------
; --- git2/errors.h - Git error handling routines and variables ----------------
; ------------------------------------------------------------------------------

;; enum git_error_code
; see libgit2/enum/git_error_code

;; typedef struct { char *message; int klass; } git_error;
lostanza deftype GIT_ERROR :
  message : ptr<byte>
  klass   : int

;; enum git_error_t;
; see libgit2/enum/git_error_t

;; const git_error * git_error_last(void);
extern git_error_last : () -> ptr<GIT_ERROR>

;; void git_error_clear(void);

;; void git_error_set(int error_class, const char *fmt, ...)

;; int git_error_set_str(int error_class, const char *string);

;; void git_error_set_oom(void);


; ------------------------------------------------------------------------------
; --- git2/clone.h - Git cloning routines --------------------------------------
; ------------------------------------------------------------------------------

;; typedef int GIT_CALLBACK(git_remote_create_cb)(git_remote **out, git_repository *repo,
;;                          const char *name, const char *url, void *payload);

;; typedef int GIT_CALLBACK(git_repository_create_cb)(git_repository **out,
;;                          const char *path, int bare, void *payload);

;; typedef struct git_clone_options
;;   unsigned int version;
;;   git_checkout_options checkout_opts;
;;   git_fetch_options fetch_opts;
;;   int bare;
;;   git_clone_local_t local;
;;   const char *checkout_branch;
;;   git_repository_create_cb repository_cb;
;;   void *repository_cb_payload;
;;   git_remote_create_cb remote_cb;
;;   void *remote_cb_payload;
lostanza deftype GIT_CLONE_OPTIONS :
  version               : int
  checkout_opts         : GIT_CHECKOUT_OPTIONS
  fetch_opts            : GIT_FETCH_OPTIONS
  bare                  : int
  local                 : git_clone_local_t
  checkout_branch       : ptr<byte>
  repository_cb         : ptr<?>  ; TODO callback function pointer
  repository_cb_payload : ptr<?>
  remote_cb             : ptr<?>  ; TODO callback function pointer
  remote_cb_payload     : ptr<?>

;; int git_clone_options_init(git_clone_options *opts, unsigned int version);
extern git_clone_options_init : (ptr<GIT_CLONE_OPTIONS>, int) -> int

;; int git_clone(git_repository **out, const char *url, const char *local_path, const git_clone_options *options);
extern git_clone : (ptr<ptr<GIT_REPOSITORY>>, ptr<byte>, ptr<byte>, ptr<GIT_CLONE_OPTIONS>) -> int


; ------------------------------------------------------------------------------
; --- git2/remote.h - Git remote management functions --------------------------
; ------------------------------------------------------------------------------

;; struct git_remote_callbacks
;;   unsigned int version;
;;   git_transport_message_cb sideband_progress;
;;   int GIT_CALLBACK(completion)(git_remote_completion_t type, void *data);
;;   git_credential_acquire_cb credentials;
;;   git_transport_certificate_check_cb certificate_check;
;;   git_indexer_progress_cb transfer_progress;
;;   int GIT_CALLBACK(update_tips)(const char *refname, const git_oid *a, const git_oid *b, void *data);
;;   git_packbuilder_progress pack_progress;
;;   git_push_transfer_progress_cb push_transfer_progress;
;;   git_push_update_reference_cb push_update_reference;
;;   git_push_negotiation push_negotiation;
;;   git_transport_cb transport;
;;   git_remote_ready_cb remote_ready;
;;   void *payload;
;;   git_url_resolve_cb resolve_url;
lostanza deftype GIT_REMOTE_CALLBACKS :
  version                : int
  sideband_progress      : ptr<?>  ; TODO callback function pointer
  completion             : ptr<?>  ; TODO callback function pointer
  credentials            : ptr<?>  ; TODO callback function pointer
  certificate_check      : ptr<?>  ; TODO callback function pointer
  transfer_progress      : ptr<?>  ; TODO callback function pointer
  update_tips            : ptr<?>  ; TODO callback function pointer
  pack_progress          : ptr<?>  ; TODO callback function pointer
  push_transfer_progress : ptr<?>  ; TODO callback function pointer
  push_update_reference  : ptr<?>  ; TODO callback function pointer
  push_negotiation       : ptr<?>  ; TODO callback function pointer
  transport              : ptr<?>  ; TODO callback function pointer
  remote_ready           : ptr<?>  ; TODO callback function pointer
  payload                : ptr<?>
  resolve_url            : ptr<?>  ; TODO callback function pointer

;; int git_remote_init_callbacks(git_remote_callbacks *opts, unsigned int version);
extern git_remote_init_callbacks : (ptr<GIT_REMOTE_CALLBACKS>, int) -> int

;; typedef struct git_fetch_options;
;;   int version;
;;   git_remote_callbacks callbacks;
;;   git_fetch_prune_t prune;
;;   int update_fetchhead;
;;   git_remote_autotag_option_t download_tags;
;;   git_proxy_options proxy_opts;
;;   int depth;
;;   git_remote_redirect_t follow_redirects;
;;   git_strarray custom_headers;
lostanza deftype GIT_FETCH_OPTIONS :
  version          : int
  callbacks        : GIT_REMOTE_CALLBACKS
  prune            : git_fetch_prune_t
  update_fetchhead : int
  download_tags    : git_remote_autotag_option_t
  proxy_opts       : GIT_PROXY_OPTIONS
  depth            : int
  follow_redirects : git_remote_redirect_t
  custom_headers   : GIT_STRARRAY

;; int git_fetch_options_init(git_fetch_options *opts, unsigned int version);
extern git_fetch_options_init : (ptr<GIT_FETCH_OPTIONS>, int) -> int


; ------------------------------------------------------------------------------
; --- git2/proxy.h -------------------------------------------------------------
; ------------------------------------------------------------------------------

;; typedef struct git_proxy_options;
;;   unsigned int version;
;;   git_proxy_t type;
;;   const char *url;
;;   git_credential_acquire_cb credentials;
;;   git_transport_certificate_check_cb certificate_check;
;;   void *payload;
lostanza deftype GIT_PROXY_OPTIONS :
  version           : int
  type              : git_proxy_t
  url               : ptr<byte>
  credentials       : ptr<?>  ; TODO callback function pointer
  certificate_check : ptr<?>  ; TODO callback function pointer
  payload           : ptr<?>

;; int git_proxy_options_init(git_proxy_options *opts, unsigned int version);
extern git_proxy_options_init : (ptr<GIT_PROXY_OPTIONS>, int) -> int


; ------------------------------------------------------------------------------
; --- git2/checkout.h - Git checkout routines ----------------------------------
; ------------------------------------------------------------------------------

;; enum git_checkout_strategy_t;
; see libgit2/enum/git_checkout_strategy_t

;; enum git_checkout_notify_t
; see libgit2/enum/git_checkout_notify_t

;; typedef struct git_checkout_perfdata;
;;   size_t mkdir_calls;
;;   size_t stat_calls;
;;   size_t chmod_calls;

;; typedef int GIT_CALLBACK(git_checkout_notify_cb)(git_checkout_notify_t why, const char *path, const git_diff_file *baseline,
;;                                                  const git_diff_file *target, const git_diff_file *workdir, void *payload);

;; typedef void GIT_CALLBACK(git_checkout_progress_cb)(const char *path, size_t completed_steps,
;;                                                     size_t total_steps, void *payload);

;; typedef void GIT_CALLBACK(git_checkout_perfdata_cb)(const git_checkout_perfdata *perfdata, void *payload);

;; typedef struct git_checkout_options git_checkout_options;
;;   unsigned int version;
;;   unsigned int checkout_strategy;
;;   int disable_filters;
;;   unsigned int dir_mode;
;;   unsigned int file_mode;
;;   int file_open_flags;
;;   unsigned int notify_flags;
;;   git_checkout_notify_cb notify_cb;
;;   void *notify_payload;
;;   git_checkout_progress_cb progress_cb;
;;   void *progress_payload;
;;   git_strarray paths;
;;   git_tree *baseline;
;;   git_index *baseline_index;
;;   const char *target_directory;
;;   const char *ancestor_label;
;;   const char *our_label;
;;   const char *their_label;
;;   git_checkout_perfdata_cb perfdata_cb;
;;   void *perfdata_payload;
lostanza deftype GIT_CHECKOUT_OPTIONS :
   version           : int
   checkout_strategy : int
   disable_filters   : int
   dir_mode          : int
   file_mode         : int
   file_open_flags   : int
   notify_flags      : int
   notify_cb         : ptr<?>  ; TODO callback function pointer
   notify_payload    : ptr<?>
   progress_cb       : ptr<?>  ; TODO callback function pointer
   progress_payload  : ptr<?>
   paths             : GIT_STRARRAY
   baseline          : ptr<GIT_TREE>
   baseline_index    : ptr<GIT_INDEX>
   target_directory  : ptr<byte>
   ancestor_label    : ptr<byte>
   our_label         : ptr<byte>
   their_label       : ptr<byte>
   perfdata_cb       : ptr<?>  ; TODO callback function pointer
   perfdata_payload  : ptr<?>

;; int git_checkout_options_init(git_checkout_options *opts, unsigned int version);
extern git_checkout_options_init : (ptr<GIT_CHECKOUT_OPTIONS>, int) -> int

;; int git_checkout_head(git_repository *repo, const git_checkout_options *opts);

;; int git_checkout_index(git_repository *repo, git_index *index, const git_checkout_options *opts);

;; int git_checkout_tree(git_repository *repo, const git_object *treeish, const git_checkout_options *opts);


;============================================================
;======================= Wrappers ===========================
;============================================================

; EXAMPLE FIXME public lostanza defn libarchive_error_string (p:ref<LIBARCHIVE>) -> ref<String|False> :
;   val pb:ptr<byte> = call-c archive_error_string(p.la-ptr)
;   if pb == null :
;     return false
;   else :
;     return String(pb)

; EXAMPLE FIXME public lostanza defn libarchive_read_close (p:ref<LIBARCHIVE>) -> ref<Int> :
;   return new Int{call-c archive_read_close(p.la-ptr)}



;============================================================
;================ High Level Functions ======================
;============================================================

; EXAMPLE FIXME defn errstr (i:Int) -> String :
;   switch {i == _} :
;     ARCHIVE_EOF    : "ARCHIVE_EOF"
;     ARCHIVE_OK     : "ARCHIVE_OK"
;     ARCHIVE_RETRY  : "ARCHIVE_RETRY"
;     ARCHIVE_WARN   : "ARCHIVE_WARN"
;     ARCHIVE_FAILED : "ARCHIVE_FAILED"
;     ARCHIVE_FATAL  : "ARCHIVE_FATAL"
;     else : to-string(i)

; EXAMPLE FIXME public defn untar (filename:String, targetdir:String, -- verbose:True|False = false, dryrun:True|False = false) -> Int :


;========================================
;; Initial target
;; 1. git_clone
;; 2. git_fetch
;; 3. git_checkout
;; 4. git_tag
;; 5. no credentials
;; 6. no progress callbacks
;;
;; Equivalent of this:
;; 1. git clone https://github.com/StanzaOrg/slm-json.git    ; https-only at first, maybe ssh later
;; 2. git checkout static                                    ; checkout different branch as an example
;; 3. git fetch                                              ; get new changes
;; 4. git tag -l                                             ; list tags
;; 5. git checkout v0.0.9                                    ; checkout tag - leaves detached head state?


;========================================
;; required data and functions
; struct git_repository
; git_libgit2_init()
; struct git_clone_options
; git_clone_options_init()
; enum git_checkout_strategy_t;
; struct git_checkout_options
; git_checkout_options_init()
; git_clone()
; struct git_error
; enum git_error_code
; git_error_last()
; git_repository_free()
; git_libgit2_shutdown()

;========================================
;; test flow
; git_repository *repo = NULL;

; const char *git_dir = NULL;
; if (!git_dir)
;         git_dir = ".";

; int return_code = 1;

; size_t i;

; ;; init
; git_libgit2_init();

; ;; clone
;   progress_data pd = {{0}};
;   git_repository *cloned_repo = NULL;
;   git_clone_options clone_opts = GIT_CLONE_OPTIONS_INIT;
;   git_checkout_options checkout_opts = GIT_CHECKOUT_OPTIONS_INIT;

;   /* Set up options */
;   checkout_opts.checkout_strategy = GIT_CHECKOUT_SAFE;
;   checkout_opts.progress_cb = checkout_progress;
;   checkout_opts.progress_payload = &pd;
;   clone_opts.checkout_opts = checkout_opts;
;   clone_opts.fetch_opts.callbacks.sideband_progress = sideband_progress;
;   clone_opts.fetch_opts.callbacks.transfer_progress = &fetch_progress;
;   clone_opts.fetch_opts.callbacks.credentials = cred_acquire_cb;
;   clone_opts.fetch_opts.callbacks.payload = &pd;

;   /* Do the clone */
;   error = git_clone(&cloned_repo, url, path, &clone_opts);
;   if (error != 0) {
;           const git_error *err = git_error_last();
;           if (err) printf("ERROR %d: %s\n", err->klass, err->message);
;           else printf("ERROR %d: no detailed info\n", error);
;   }
;   else if (cloned_repo) git_repository_free(cloned_repo);

; ;; open existing
; git_repository_open_ext(&repo, git_dir, 0, NULL)

; ;; free
; git_repository_free(repo);
; git_libgit2_shutdown();
